#!/bin/bash

# AI Agent Threat Modeling Script
# Interactive STRIDE-based threat assessment tool

set -e

# Colors
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
AGENT_NAME=""
AGENT_TIER=""
OUTPUT_DIR="workflows/threat-modeling/reports"
REPORT_FILE=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --agent)
            AGENT_NAME="$2"
            shift 2
            ;;
        --tier)
            AGENT_TIER="$2"
            shift 2
            ;;
        --output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -h|--help)
            echo "Usage: $0 --agent <name> --tier <1-4> [--output <dir>]"
            echo ""
            echo "Options:"
            echo "  --agent <name>    Agent name (required)"
            echo "  --tier <1-4>      Agent tier (required)"
            echo "  --output <dir>    Output directory (default: workflows/threat-modeling/reports)"
            echo "  -h, --help        Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Validate required arguments
if [ -z "$AGENT_NAME" ] || [ -z "$AGENT_TIER" ]; then
    echo -e "${RED}Error: --agent and --tier are required${NC}"
    echo "Use --help for usage information"
    exit 1
fi

# Validate tier
if [[ ! "$AGENT_TIER" =~ ^[1-4]$ ]]; then
    echo -e "${RED}Error: Tier must be 1, 2, 3, or 4${NC}"
    exit 1
fi

echo -e "${BLUE}╔═══════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║   AI Agent Threat Modeling Tool v2.0             ║${NC}"
echo -e "${BLUE}║   STRIDE-based Security Assessment                ║${NC}"
echo -e "${BLUE}╚═══════════════════════════════════════════════════╝${NC}"
echo ""
echo -e "Agent: ${GREEN}$AGENT_NAME${NC}"
echo -e "Tier: ${GREEN}$AGENT_TIER${NC}"
echo ""

# Create output directory
mkdir -p "$OUTPUT_DIR"

# Generate report filename
DATE=$(date +%Y-%m-%d)
REPORT_FILE="$OUTPUT_DIR/${AGENT_NAME}-${DATE}.md"

# Initialize threat counter
THREAT_COUNT=0
CRITICAL_COUNT=0
HIGH_COUNT=0
MEDIUM_COUNT=0

# Function to ask yes/no question
ask_yn() {
    local prompt="$1"
    local response
    read -p "$prompt (y/n): " response
    case "$response" in
        [yY]|[yY][eE][sS]) return 0 ;;
        *) return 1 ;;
    esac
}

# Function to get risk score
calculate_risk() {
    local likelihood=$1
    local impact=$2
    echo $((likelihood * impact))
}

# Function to get priority emoji
get_priority() {
    local score=$1
    if [ $score -ge 15 ]; then
        echo "🔴 Critical"
    elif [ $score -ge 8 ]; then
        echo "🟡 High"
    else
        echo "🟢 Medium/Low"
    fi
}

# Function to add threat to report
add_threat() {
    local category="$1"
    local description="$2"
    local likelihood=$3
    local impact=$4
    local mitigations="$5"

    THREAT_COUNT=$((THREAT_COUNT + 1))
    local score=$(calculate_risk $likelihood $impact)
    local priority=$(get_priority $score)

    # Update counters
    if [ $score -ge 15 ]; then
        CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
    elif [ $score -ge 8 ]; then
        HIGH_COUNT=$((HIGH_COUNT + 1))
    else
        MEDIUM_COUNT=$((MEDIUM_COUNT + 1))
    fi

    cat >> "$REPORT_FILE" <<EOF

### T-$(printf "%03d" $THREAT_COUNT): $description

**STRIDE Category**: $category
**Likelihood**: $likelihood
**Impact**: $impact
**Risk Score**: $score $priority

**Proposed Mitigations**: $mitigations

**Status**: Identified
**Target Date**: TBD
**Owner**: TBD

---
EOF
}

# Start report
cat > "$REPORT_FILE" <<EOF
# Threat Model: $AGENT_NAME

**Date**: $(date +%Y-%m-%d)
**Agent Tier**: Tier $AGENT_TIER
**Generated by**: $(whoami)
**Tool**: AI Agent Threat Modeling v2.0

## System Description

Agent Name: $AGENT_NAME
Agent Tier: Tier $AGENT_TIER

[TODO: Add detailed agent description, purpose, and capabilities]

## Threat Model Session

This threat model was generated using STRIDE methodology adapted for AI agents.

---

## Identified Threats
EOF

echo -e "\n${BLUE}═══════════════════════════════════════════════════${NC}"
echo -e "${BLUE}Starting STRIDE Analysis${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════${NC}\n"

# ====================
# S - SPOOFING
# ====================
echo -e "${YELLOW}┌──────────────────────────────────────┐${NC}"
echo -e "${YELLOW}│ S - SPOOFING IDENTITY                │${NC}"
echo -e "${YELLOW}└──────────────────────────────────────┘${NC}\n"

if ask_yn "Can someone impersonate a user to the agent?"; then
    echo "Describe the threat (press Enter when done):"
    read -r threat_desc
    echo "Likelihood (1-5):"
    read -r likelihood
    echo "Impact (1-5):"
    read -r impact
    add_threat "Spoofing" "${threat_desc:-User impersonation}" "$likelihood" "$impact" "MI-006 (Access Controls)"
fi

if ask_yn "Can someone impersonate the agent to users/systems?"; then
    echo "Describe the threat:"
    read -r threat_desc
    echo "Likelihood (1-5):"
    read -r likelihood
    echo "Impact (1-5):"
    read -r impact
    add_threat "Spoofing" "${threat_desc:-Agent impersonation}" "$likelihood" "$impact" "MI-003 (Secrets Management), MI-006 (Access Controls)"
fi

# ====================
# T - TAMPERING
# ====================
echo -e "\n${YELLOW}┌──────────────────────────────────────┐${NC}"
echo -e "${YELLOW}│ T - TAMPERING WITH DATA              │${NC}"
echo -e "${YELLOW}└──────────────────────────────────────┘${NC}\n"

if ask_yn "Can prompts be injected to change agent behavior?"; then
    echo "Describe the injection vector:"
    read -r threat_desc
    echo "Likelihood (1-5):"
    read -r likelihood
    echo "Impact (1-5):"
    read -r impact
    add_threat "Tampering" "${threat_desc:-Prompt injection attack}" "$likelihood" "$impact" "MI-002 (Input Filtering), MI-017 (AI Firewall)"
fi

if ask_yn "Can training data or vector stores be modified?"; then
    echo "Describe the tampering scenario:"
    read -r threat_desc
    echo "Likelihood (1-5):"
    read -r likelihood
    echo "Impact (1-5):"
    read -r impact
    add_threat "Tampering" "${threat_desc:-Data/model tampering}" "$likelihood" "$impact" "MI-014 (RAG Security), MI-006 (Access Controls)"
fi

# ====================
# R - REPUDIATION
# ====================
echo -e "\n${YELLOW}┌──────────────────────────────────────┐${NC}"
echo -e "${YELLOW}│ R - REPUDIATION                       │${NC}"
echo -e "${YELLOW}└──────────────────────────────────────┘${NC}\n"

if ! ask_yn "Are all agent actions logged with audit trail?"; then
    add_threat "Repudiation" "Insufficient audit logging" "4" "3" "MI-019 (Audit Trails)"
fi

if ! ask_yn "Can you trace every decision back to inputs?"; then
    add_threat "Repudiation" "Missing decision traceability" "3" "3" "MI-019 (Audit Trails), MI-004 (Observability)"
fi

# ====================
# I - INFORMATION DISCLOSURE
# ====================
echo -e "\n${YELLOW}┌──────────────────────────────────────┐${NC}"
echo -e "${YELLOW}│ I - INFORMATION DISCLOSURE            │${NC}"
echo -e "${YELLOW}└──────────────────────────────────────┘${NC}\n"

if ask_yn "Can sensitive data leak to LLM provider (PII, secrets)?"; then
    echo "What type of sensitive data?"
    read -r threat_desc
    echo "Likelihood (1-5):"
    read -r likelihood
    echo "Impact (1-5):"
    read -r impact
    add_threat "Information Disclosure" "${threat_desc:-Sensitive data leakage to LLM provider}" "$likelihood" "$impact" "MI-001 (Data Leakage Prevention), MI-003 (Secrets Management)"
fi

if ask_yn "Can users access other users' data via prompts?"; then
    echo "Describe the access control issue:"
    read -r threat_desc
    echo "Likelihood (1-5):"
    read -r likelihood
    echo "Impact (1-5):"
    read -r impact
    add_threat "Information Disclosure" "${threat_desc:-Unauthorized data access via prompts}" "$likelihood" "$impact" "MI-006 (Access Controls), MI-014 (RAG Security)"
fi

# ====================
# D - DENIAL OF SERVICE
# ====================
echo -e "\n${YELLOW}┌──────────────────────────────────────┐${NC}"
echo -e "${YELLOW}│ D - DENIAL OF SERVICE                 │${NC}"
echo -e "${YELLOW}└──────────────────────────────────────┘${NC}\n"

if ask_yn "Can users trigger excessive LLM calls (cost attack)?"; then
    echo "Describe the DoS scenario:"
    read -r threat_desc
    echo "Likelihood (1-5):"
    read -r likelihood
    echo "Impact (1-5):"
    read -r impact
    add_threat "Denial of Service" "${threat_desc:-Cost-based DoS attack}" "$likelihood" "$impact" "MI-021 (Budget Limits), MI-005 (Rate Limiting), MI-009 (Cost Monitoring)"
fi

if ! ask_yn "Are there rate limits and circuit breakers?"; then
    add_threat "Denial of Service" "Missing rate limits and circuit breakers" "3" "2" "MI-005 (Rate Limiting), MI-021 (Budget Limits)"
fi

# ====================
# E - ELEVATION OF PRIVILEGE
# ====================
echo -e "\n${YELLOW}┌──────────────────────────────────────┐${NC}"
echo -e "${YELLOW}│ E - ELEVATION OF PRIVILEGE            │${NC}"
echo -e "${YELLOW}└──────────────────────────────────────┘${NC}\n"

if ask_yn "Can agent exceed its tier permissions?"; then
    echo "Describe the privilege escalation:"
    read -r threat_desc
    echo "Likelihood (1-5):"
    read -r likelihood
    echo "Impact (1-5):"
    read -r impact
    add_threat "Elevation of Privilege" "${threat_desc:-Tier permission violation}" "$likelihood" "$impact" "MI-020 (Tier Enforcement), MI-008 (Sandboxing)"
fi

if ask_yn "Can prompt injection escalate privileges?"; then
    echo "Describe the escalation vector:"
    read -r threat_desc
    echo "Likelihood (1-5):"
    read -r likelihood
    echo "Impact (1-5):"
    read -r impact
    add_threat "Elevation of Privilege" "${threat_desc:-Privilege escalation via prompt injection}" "$likelihood" "$impact" "MI-002 (Input Filtering), MI-017 (AI Firewall), MI-020 (Tier Enforcement)"
fi

# ====================
# Generate Summary
# ====================
cat >> "$REPORT_FILE" <<EOF

## Risk Summary

| Priority | Count | Required Action |
|----------|-------|-----------------|
| 🔴 Critical (15-25) | $CRITICAL_COUNT | Must mitigate before deployment |
| 🟡 High (8-14) | $HIGH_COUNT | Mitigate or add strong monitoring |
| 🟢 Medium/Low (1-7) | $MEDIUM_COUNT | Accept or monitor |

**Total Threats Identified**: $THREAT_COUNT

## Next Steps

1. **Review identified threats** with security team
2. **Prioritize mitigations** for Critical and High risks
3. **Implement controls** from Mitigation Catalog
4. **Test mitigations** before deployment
5. **Document residual risks** and get sign-off

## Deployment Decision

EOF

if [ $CRITICAL_COUNT -gt 0 ]; then
    cat >> "$REPORT_FILE" <<EOF
⚠️ **NOT APPROVED FOR DEPLOYMENT**

**Reason**: $CRITICAL_COUNT Critical risk(s) must be mitigated before deployment.

**Required Actions**:
- Implement mitigations for all Critical risks
- Test mitigation effectiveness
- Update this threat model
- Get security sign-off

EOF
else
    cat >> "$REPORT_FILE" <<EOF
✅ **READY FOR REVIEW**

No Critical risks identified. Review High risks with security team before deployment.

EOF
fi

cat >> "$REPORT_FILE" <<EOF

## Sign-off

- [ ] Developer: \_\_\_\_\_\_\_\_\_\_\_ (Date: \_\_\_\_\_\_\_\_\_\_)
- [ ] Security: \_\_\_\_\_\_\_\_\_\_\_ (Date: \_\_\_\_\_\_\_\_\_\_)
- [ ] Product Owner: \_\_\_\_\_\_\_\_\_\_\_ (Date: \_\_\_\_\_\_\_\_\_\_)

---

**Framework v2.0** - AI Agent Governance Framework

For mitigation details, see: \`policies/mitigation-catalog.md\`
For risk definitions, see: \`policies/risk-catalog.md\`
EOF

# ====================
# Display Results
# ====================
echo -e "\n${BLUE}═══════════════════════════════════════════════════${NC}"
echo -e "${BLUE}Threat Modeling Complete${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════${NC}\n"

echo -e "Threats Identified: ${GREEN}$THREAT_COUNT${NC}"
echo -e "  🔴 Critical: ${RED}$CRITICAL_COUNT${NC}"
echo -e "  🟡 High: ${YELLOW}$HIGH_COUNT${NC}"
echo -e "  🟢 Medium/Low: ${GREEN}$MEDIUM_COUNT${NC}"
echo ""

if [ $CRITICAL_COUNT -gt 0 ]; then
    echo -e "${RED}⚠️  DEPLOYMENT BLOCKED${NC}"
    echo -e "${RED}   $CRITICAL_COUNT Critical risk(s) must be mitigated first${NC}"
    echo ""
fi

echo -e "Report generated: ${GREEN}$REPORT_FILE${NC}"
echo ""
echo -e "${BLUE}Next Steps:${NC}"
echo "1. Review the threat model report"
echo "2. Implement mitigations from policies/mitigation-catalog.md"
echo "3. Update report with mitigation status"
echo "4. Get security team sign-off"
echo ""

exit 0
