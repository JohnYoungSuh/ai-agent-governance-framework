# Default values for AI Agent Helm chart
# This is a YAML-formatted file.

# Agent configuration
agent:
  # Agent name (e.g., security-agent, it-ops-agent)
  name: security-agent
  # Agent tier (1-4)
  tier: 3
  # Agent type (security, it-ops, ai, architect)
  type: security
  # Agent version
  version: "1.0.0"
  # Framework version
  frameworkVersion: "2.1.0"

# Image configuration
image:
  repository: ghcr.io/your-org/security-agent
  pullPolicy: Always
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Deployment configuration
replicaCount: 2

# Deployment strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

# Container Security Context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  readOnlyRootFilesystem: true

# Service configuration
service:
  type: ClusterIP
  port: 8080
  metricsPort: 9090
  annotations: {}

# Ingress configuration
ingress:
  enabled: false
  className: nginx
  annotations: {}
  hosts:
    - host: security-agent.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Resources
resources:
  requests:
    cpu: 500m
    memory: 1Gi
    ephemeral-storage: 2Gi
  limits:
    cpu: 2
    memory: 4Gi
    ephemeral-storage: 5Gi

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Probes
livenessProbe:
  httpGet:
    path: /health/live
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health/ready
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

startupProbe:
  httpGet:
    path: /health/startup
    port: http
  initialDelaySeconds: 0
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 30

# Persistence
persistence:
  enabled: true
  storageClassName: standard
  accessMode: ReadWriteOnce
  size: 10Gi
  mountPath: /var/data

# Environment variables
env:
  - name: AGENT_NAME
    value: security-agent
  - name: AGENT_TIER
    value: "3"
  - name: FRAMEWORK_VERSION
    value: "2.1.0"
  - name: ENVIRONMENT
    value: production

# ConfigMap data
config:
  agentConfig: |
    agent:
      name: security-agent
      tier: 3
      version: "1.0.0"
      framework_version: "2.1.0"
    observability:
      metrics:
        enabled: true
        port: 9090
      traces:
        enabled: true
      logs:
        level: info

# Secrets (managed by External Secrets Operator)
secrets:
  create: false
  externalSecrets:
    enabled: true
    backend: aws-secrets-manager
    secretStoreRef: aws-secret-store
    dataFrom:
      - extract:
          key: ai-agents/prod/security-agent

# RBAC
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["pods", "services", "configmaps"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps"]
      resources: ["deployments"]
      verbs: ["get", "list", "watch"]

# Network Policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            framework: ai-governance
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 9090
  egress:
    - to:
      - namespaceSelector:
          matchLabels:
            kubernetes.io/metadata.name: kube-system
      ports:
        - protocol: UDP
          port: 53
    - to:
      - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 443

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# CronJob configuration (for scheduled tasks)
cronjob:
  enabled: true
  schedule: "0 2 * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  backoffLimit: 2
  activeDeadlineSeconds: 3600

# Monitoring
monitoring:
  enabled: true
  prometheusRule:
    enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s

# Governance annotations
governance:
  budgetMonthly: 150
  costCenter: security
  approvers: security-team,compliance-team
  tier: 3

# Node selector
nodeSelector: {}

# Tolerations
tolerations:
  - key: "ai-agents"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

# Affinity
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - security-agent
          topologyKey: kubernetes.io/hostname
