---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-agent
  namespace: ai-agents-prod
  labels:
    app: security-agent
    tier: "3"
    agent-type: security
    framework-version: "2.1.0"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: security-agent-role
  namespace: ai-agents-prod
spec:
  rules:
  - apiGroups: [""]
    resources: ["pods", "services", "configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "statefulsets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: security-agent-rolebinding
  namespace: ai-agents-prod
subjects:
- kind: ServiceAccount
  name: security-agent
  namespace: ai-agents-prod
roleRef:
  kind: Role
  name: security-agent-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-agent-config
  namespace: ai-agents-prod
  labels:
    app: security-agent
    tier: "3"
data:
  agent-config.yaml: |
    agent:
      name: security-agent
      tier: 3
      version: "1.0.0"
      framework_version: "2.1.0"

    scanning:
      schedule: "0 2 * * *"  # 2 AM daily
      tools:
        - trivy
        - grype
        - checkov
      targets:
        - kubernetes-cluster
        - container-images
        - infrastructure-as-code

    compliance:
      frameworks:
        - CIS-Kubernetes
        - PCI-DSS
        - SOC2
      reporting:
        format: json
        destination: s3://ai-governance-reports/security/

    observability:
      metrics:
        enabled: true
        port: 9090
      traces:
        enabled: true
        endpoint: http://jaeger-collector.ai-agents-monitoring:14268/api/traces
      logs:
        level: info
        format: json

    governance:
      budget:
        monthly_limit_usd: 150
        alert_threshold: 0.8
      approvals:
        required_for_critical: true
        reviewers:
          - security-team
          - compliance-team

  scan-policies.yaml: |
    policies:
      vulnerability_scan:
        severity_threshold: MEDIUM
        fail_on_critical: true
        ignore_unfixed: false

      compliance_check:
        fail_on_violation: true
        required_controls:
          - MI-001  # Data leakage prevention
          - MI-003  # Secrets management
          - MI-006  # Access control
          - MI-009  # Cost monitoring
          - MI-020  # Tier enforcement

      security_audit:
        scope:
          - network-policies
          - rbac-permissions
          - secrets-encryption
          - pod-security-standards
---
apiVersion: v1
kind: Secret
metadata:
  name: security-agent-secrets
  namespace: ai-agents-prod
  labels:
    app: security-agent
    tier: "3"
type: Opaque
stringData:
  # These will be populated by External Secrets Operator
  trivy-api-token: ""
  github-token: ""
  slack-webhook-url: ""
  aws-access-key-id: ""
  aws-secret-access-key: ""
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-agent
  namespace: ai-agents-prod
  labels:
    app: security-agent
    tier: "3"
    agent-type: security
    framework-version: "2.1.0"
  annotations:
    governance.ai/budget-monthly: "150"
    governance.ai/cost-center: "security"
    governance.ai/approvers: "security-team,compliance-team"
spec:
  replicas: 2
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: security-agent
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: security-agent
        tier: "3"
        agent-type: security
        framework-version: "2.1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: security-agent
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      initContainers:
      - name: framework-init
        image: busybox:1.36
        command: ['sh', '-c', 'echo "Framework v2.1.0 initialized" && sleep 2']
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true

      containers:
      - name: security-agent
        image: ghcr.io/your-org/security-agent:latest
        imagePullPolicy: Always

        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP

        env:
        - name: AGENT_NAME
          value: "security-agent"
        - name: AGENT_TIER
          value: "3"
        - name: FRAMEWORK_VERSION
          value: "2.1.0"
        - name: ENVIRONMENT
          value: "production"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

        envFrom:
        - configMapRef:
            name: security-agent-config
        - secretRef:
            name: security-agent-secrets

        resources:
          requests:
            cpu: 500m
            memory: 1Gi
            ephemeral-storage: 2Gi
          limits:
            cpu: 2
            memory: 4Gi
            ephemeral-storage: 5Gi

        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        startupProbe:
          httpGet:
            path: /health/startup
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30

        volumeMounts:
        - name: config
          mountPath: /etc/security-agent
          readOnly: true
        - name: scan-results
          mountPath: /var/scan-results
        - name: tmp
          mountPath: /tmp

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true

      volumes:
      - name: config
        configMap:
          name: security-agent-config
      - name: scan-results
        persistentVolumeClaim:
          claimName: security-agent-scan-results
      - name: tmp
        emptyDir: {}

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - security-agent
              topologyKey: kubernetes.io/hostname

      tolerations:
      - key: "ai-agents"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: security-agent
  namespace: ai-agents-prod
  labels:
    app: security-agent
    tier: "3"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: security-agent
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: security-agent-scan-results
  namespace: ai-agents-prod
  labels:
    app: security-agent
    tier: "3"
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: security-agent-hpa
  namespace: ai-agents-prod
  labels:
    app: security-agent
    tier: "3"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: security-agent
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: security-agent-scanner
  namespace: ai-agents-prod
  labels:
    app: security-agent
    tier: "3"
    job-type: scanner
spec:
  schedule: "0 2 * * *"  # 2 AM daily
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    metadata:
      labels:
        app: security-agent
        tier: "3"
        job-type: scanner
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 3600  # 1 hour timeout
      template:
        metadata:
          labels:
            app: security-agent
            tier: "3"
            job-type: scanner
        spec:
          serviceAccountName: security-agent
          restartPolicy: OnFailure

          containers:
          - name: scanner
            image: ghcr.io/your-org/security-agent:latest
            command: ["/app/scanner.sh"]
            args: ["--mode=scheduled", "--scan-all"]

            env:
            - name: AGENT_NAME
              value: "security-agent-scanner"
            - name: AGENT_TIER
              value: "3"
            - name: SCAN_MODE
              value: "scheduled"

            envFrom:
            - configMapRef:
                name: security-agent-config
            - secretRef:
                name: security-agent-secrets

            resources:
              requests:
                cpu: 1
                memory: 2Gi
              limits:
                cpu: 4
                memory: 8Gi

            volumeMounts:
            - name: scan-results
              mountPath: /var/scan-results
            - name: tmp
              mountPath: /tmp

          volumes:
          - name: scan-results
            persistentVolumeClaim:
              claimName: security-agent-scan-results
          - name: tmp
            emptyDir: {}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: security-agent-netpol
  namespace: ai-agents-prod
spec:
  podSelector:
    matchLabels:
      app: security-agent
  policyTypes:
  - Ingress
  - Egress

  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          framework: ai-governance
    - podSelector:
        matchLabels:
          app: it-ops-agent
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090

  egress:
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
    ports:
    - protocol: UDP
      port: 53

  # Allow monitoring
  - to:
    - namespaceSelector:
        matchLabels:
          framework: ai-governance
          purpose: monitoring
    ports:
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 14268

  # Allow external API calls (GitHub, Trivy, etc.)
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
