# GitHub Actions Workflow for AI Ops Agent
# Agent: ${agent_name}
# Tier: ${agent_tier}
# Generated by Terraform

name: AI Ops Agent - ${agent_name}

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: 'Agent action to perform'
        required: true
        type: choice
        options:
          - deploy
          - audit
          - validate
          - cost-report

env:
  AGENT_NAME: ${agent_name}
  AGENT_TIER: ${agent_tier}
  AWS_REGION: ${aws_region}
  AGENT_ROLE_ARN: ${agent_role_arn}
  LLM_MODEL_PROVIDER: ${llm_model_provider}
  LLM_MODEL_VERSION: ${llm_model_version}
  DAILY_COST_BUDGET: ${daily_cost_budget}
  MONTHLY_COST_BUDGET: ${monthly_cost_budget}
  HUMAN_REVIEW_PERCENTAGE: ${human_review_percentage}
  LOG_GROUP_NAME: ${log_group_name}

jobs:
  governance-check:
    name: Governance Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: $${{ secrets.AWS_ACCESS_KEY_ID_${upper(replace(agent_name, "-", "_"))} }}
          aws-secret-access-key: $${{ secrets.AWS_SECRET_ACCESS_KEY_${upper(replace(agent_name, "-", "_"))} }}
          aws-region: $${AWS_REGION}
          role-to-assume: $${{ secrets.AGENT_ROLE_ARN_${upper(replace(agent_name, "-", "_"))} }}
          role-duration-seconds: 3600

      - name: Validate Tier Permissions (MI-020)
        run: |
          echo "Validating tier permissions for $${AGENT_TIER}"
          # Add tier permission validation logic

      - name: Check Cost Budget (MI-009, MI-021)
        run: |
          echo "Checking cost budget limits"
          # Add cost budget check logic

      - name: Verify Secrets Configuration (MI-003)
        run: |
          echo "Verifying secrets are configured in AWS Secrets Manager"
          aws secretsmanager describe-secret --secret-id $${AGENT_NAME}-llm-api-key
          aws secretsmanager describe-secret --secret-id $${AGENT_NAME}-github-token

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: governance-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Secrets Scanning (MI-003)
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: PII Detection Check (MI-001)
        run: |
          echo "Checking for PII in code and configs"
          # Add PII detection logic using presidio or similar

      - name: Dependency Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'

  agent-deployment:
    name: Deploy AI Agent
    runs-on: ubuntu-latest
    needs: [governance-check, security-scan]
    if: github.event_name == 'push' || github.event.inputs.action == 'deploy'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: $${{ secrets.AWS_ACCESS_KEY_ID_${upper(replace(agent_name, "-", "_"))} }}
          aws-secret-access-key: $${{ secrets.AWS_SECRET_ACCESS_KEY_${upper(replace(agent_name, "-", "_"))} }}
          aws-region: $${AWS_REGION}
          role-to-assume: $${{ secrets.AGENT_ROLE_ARN_${upper(replace(agent_name, "-", "_"))} }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install anthropic boto3 presidio-analyzer presidio-anonymizer opentelemetry-api opentelemetry-sdk

      - name: Run Pre-Deployment Tests
        run: |
          echo "Running pre-deployment tests"
          # Add test execution logic

      - name: Human Review Gate (MI-007)
        if: $${AGENT_TIER} == 'tier3-operations' || $${AGENT_TIER} == 'tier4-architect'
        run: |
          echo "Human review required for $${AGENT_TIER}"
          echo "Review percentage: $${HUMAN_REVIEW_PERCENTAGE}"
          # Add human review workflow integration

      - name: Deploy Agent
        run: |
          echo "Deploying $${AGENT_NAME} ($${AGENT_TIER})"
          # Add deployment logic (Lambda, ECS, etc.)

      - name: Log Audit Trail (MI-019)
%{ if enable_audit_trail ~}
        run: |
          aws dynamodb put-item \
            --table-name ${audit_table_name} \
            --item '{
              "audit_id": {"S": "'"$${{github.run_id}}"'"},
              "timestamp": {"S": "'"`date -u +"%Y-%m-%dT%H:%M:%SZ"`"'"},
              "actor": {"S": "github-actions"},
              "action": {"S": "agent_deployment"},
              "workflow_step": {"S": "deployment"},
              "policy_controls_checked": {"L": [{"S": "MI-007"}, {"S": "MI-020"}]},
              "compliance_result": {"S": "pass"},
              "auditor_agent": {"S": "AUD-001"}
            }'
%{ endif ~}

      - name: Send Deployment Notification
        if: always()
        run: |
          echo "Deployment completed for $${AGENT_NAME}"
          # Add Slack/email notification

  cost-tracking:
    name: Cost Tracking Report
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'cost-report' || github.event_name == 'schedule'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: $${{ secrets.AWS_ACCESS_KEY_ID_${upper(replace(agent_name, "-", "_"))} }}
          aws-secret-access-key: $${{ secrets.AWS_SECRET_ACCESS_KEY_${upper(replace(agent_name, "-", "_"))} }}
          aws-region: $${AWS_REGION}

      - name: Generate Cost Report (MI-009)
        run: |
          echo "Generating cost report for $${AGENT_NAME}"
          aws cloudwatch get-metric-statistics \
            --namespace AI/Agent \
            --metric-name EstimatedCost \
            --dimensions Name=AgentName,Value=$${AGENT_NAME} \
            --start-time `date -u -d '7 days ago' +%Y-%m-%dT%H:%M:%S` \
            --end-time `date -u +%Y-%m-%dT%H:%M:%S` \
            --period 86400 \
            --statistics Sum

      - name: Check Budget Compliance (MI-021)
        run: |
          echo "Daily budget: $$${DAILY_COST_BUDGET}"
          echo "Monthly budget: $$${MONTHLY_COST_BUDGET}"
          # Add budget compliance check logic

  audit-trail-review:
    name: Audit Trail Review
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'audit'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: $${{ secrets.AWS_ACCESS_KEY_ID_${upper(replace(agent_name, "-", "_"))} }}
          aws-secret-access-key: $${{ secrets.AWS_SECRET_ACCESS_KEY_${upper(replace(agent_name, "-", "_"))} }}
          aws-region: $${AWS_REGION}

%{ if enable_audit_trail ~}
      - name: Query Audit Trail (MI-019)
        run: |
          echo "Querying audit trail for $${AGENT_NAME}"
          aws dynamodb scan \
            --table-name ${audit_table_name} \
            --filter-expression "actor = :agent" \
            --expression-attribute-values '{":agent":{"S":"'"$${AGENT_NAME}"'"}}' \
            --max-items 100
%{ endif ~}

      - name: Generate Compliance Report (MI-018)
        run: |
          echo "Generating compliance report"
          # Add compliance report generation logic

# Schedule for periodic cost reporting
# Run daily at 6 AM UTC
# Uncomment to enable:
# on:
#   schedule:
#     - cron: '0 6 * * *'
